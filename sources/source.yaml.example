# Name of the data source.
# Will be used in SQL queries
name: application
# Label to display in Web GUI dropdowns
label: Application
# GUI dropdowns icon. Check https://fomantic-ui.com/elements/icon.html for the possible icons
icon: database

# Plugin to use
plugin: elasticsearch.v7
# Whether this source should be used when performing the search in a
# "global" special source. See a builtin documentation for more information
inGlobal: true
# Whether to include datetime range in the query,
# which is always inserted by the GUI JavaScript by default.
# Some data sources may not have this field and users may want to ignore it
includeDatetime: true
# Whether the data source supports SQL features.
# Some API services support single 'field=value' queries only, set to 'false'
# to split queries like "... OR ... OR ..." or "field IN ('...', '...')"
# into multiple independent single queries
supportsSQL: true
# Acceptable actions (connecting, search, etc.) timeout.
# String type, not integer. 60s if not specified
timeout: 60s

# Access details. Options depend on plugin being used,
# see the documentation for particular plugin for details
access:
    url: http://localhost:9200
    indices: apps-*

# List of fields data source should return if not all are needed.
# In some cases this allows to be more efficient. Not all plugins/data sources
# support such feature, but, for example, in Elasticsearch plugin this allows
# to see the index name stored in "_index"
includeFields:
    - _index
    - address
    - domain

# List of fields used when generating statistics charts
# when the amount of returned entries exceeds the limit.
# One "Top 10" chart for every field will be generated and displayed.
statsFields:
    - application
    - proto
    - version

# Rename some fields to implement universally requestable fields.
#
# For example, "ip" -> "source.ip" or "src_ip"
# will allow to use simply "ip" even if your database
# has a different name for this field.
#
# SQL query will always contain a "datetime" field when sent by the GUI JavaScript,
# it should be renamed carefully or removed by the "includeDatetime" setting
replaceFields:
    common_field_1: unique_field_1
    common_field_2: unique_field_2
    datetime:       timestamp


# List of relations to display.
#
# When a data source returns an entry - plugin needs to know which fields
# represent nodes, which attributes, etc.
# Each relation consists of three records: "from", "to" and "edge".
#
# "from" and "to" records have the following fields:
#
#   id         - field name to use as node's unique ID and label
#   group      - node's type, used for styling like classes in CSS
#   search     - field name to query when extending graph from this node
#   attributes - node's attributes to show when it is clicked. For example,
#                database's entry/row contains 10 fields - one will be used
#                as a node's ID and 7 of others as it's attributes.
#                This logic is implemented by the plugins. Attributes of the
#                same node from different data sources will be merged,
#                duplicates removed. Optional field
#   varTypes   - in rare cases node's type is different from the expected.
#                For example, most of database records contain a field
#                "source.fqdn" which is a domain name, but some records
#                contain an IP address in that field. This setting allows to set
#                a list of patterns to detect other types. Optional field.
#
#                Fields of the list elements:
#
#                  regex  - regex to detect uncommon field type
#                  group  - new group name to replace the old one
#                  search - new search field to replace the old one
#
# The "edge" record has these fields:
#
#   label      - label to display on it
#   attributes - attributes to show when edge is clicked. Optional field

relations:
    -
      from:
          id: source.fqdn
          group: domain
          search: domain
          attributes: [ "categories", "confidence", "proto", "version" ]
          varTypes:
              -
                regex: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
                group: ip
                search: ip

      to:
          id: ip
          group: ip
          search: ip

      edge:
          label: owns
          attributes: []

    -
      from:
          id: source.fqdn
          group: domain
          search: domain

      to:
          id: redirect_to
          group: redirect_to
          search: domain

      edge:
          label: redirect
